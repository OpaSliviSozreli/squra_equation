#include "test.h"
#include "square_solver.h"
#include "auxiliary_func.h"
#include "print_roots.h"

int run_test( test_data *data )
{
    assert( data != NULL );

    type_definer( &data->equation_parameters );
    int number_of_roots = data->equation_parameters.cur_roots.number_of_roots;
    int count_of_correct_tests = 0;

    if ( number_of_roots != data->expected_roots.number_of_roots )
    {
        txSetConsoleAttr( FOREGROUND_RED | BACKGROUND_WHITE );
        printf( "#Error number of roots = %d Expected: number of roots = %d", number_of_roots, data->expected_roots.number_of_roots );
    }

    switch( number_of_roots )
    {
        case ZERO_ROOTS:
            return ZERO_ROOTS;
            break;
        case ONE_ROOT:
            if ( compare_with_zero( data->equation_parameters.cur_roots.x2 - data->expected_roots.x2 ) )
            {
                txSetConsoleAttr( FOREGROUND_GREEN | BACKGROUND_BLACK );
                printf( "#OK\n" );
                return ONE_ROOT;
            }
            else
            {
                txSetConsoleAttr( FOREGROUND_RED | BACKGROUND_WHITE );
                printf( "#Error Test, a = %lg, b = %lg, c = %lg, x = %lg, number of roots = 1\n",
                        data->equation_parameters.coefficients.a, data->equation_parameters.coefficients.b, data->equation_parameters.coefficients.c, data->equation_parameters.cur_roots.x1 );
                printf( "#Expected x = %lg", data->expected_roots.x1 );
                break;
            }
        case TWO_ROOTS:
            if ( ( ( ( compare_with_zero(   data->equation_parameters.cur_roots.x1 - data->expected_roots.x1 ) ) &&
                     ( compare_with_zero(   data->equation_parameters.cur_roots.x2 - data->expected_roots.x2 ) ) ) )  ||
                   ( ( compare_with_zero( ( data->equation_parameters.cur_roots.x2 - data->expected_roots.x1 ) ) &&
                     ( compare_with_zero(   data->equation_parameters.cur_roots.x1 - data->expected_roots.x2 ) ) ) ) )
            {
                txSetConsoleAttr( FOREGROUND_GREEN | BACKGROUND_BLACK );
                printf( "#OK\n" );
                return TWO_ROOTS;
            }
            else
            {
                txSetConsoleAttr( FOREGROUND_RED | BACKGROUND_WHITE );
                printf( "#Error Test, a = %lg, b = %lg, c = %lg, x1 = %lg, x2 = %lg, number of roots = 2\n",
                        data->equation_parameters.coefficients.a, data->equation_parameters.coefficients.b,
                        data->equation_parameters.coefficients.c, data->equation_parameters.cur_roots.x1,
                        data->equation_parameters.cur_roots.x2 );
                printf( "#Expected x1 = %lg, x2 = %lg",
                        data->expected_roots.x1, data->expected_roots.x2 );
                break;
            }
        case SS_INF_ROOTS:
            txSetConsoleAttr( FOREGROUND_GREEN | BACKGROUND_BLACK );
            printf( "#OK\n" );
            return SS_INF_ROOTS;
    }
}

int test_solver( test_data parameters[] )
{
    assert( parameters != NULL );

    for ( int i = 0; i < NUMBER_OF_TESTS; i++ )
    {
        run_test( &parameters[i] );
        int count_of_correct_tests = 0;
        for ( i = 0; i < NUMBER_OF_TESTS; i++ )
        {
            count_of_correct_tests += run_test( &parameters[i] );
        }
        printf( "#Number of test done right = %d out of 5", count_of_correct_tests );
        return count_of_correct_tests;
    }
}

void choose_how_to_test( test_data parameters[], SquareEquationCoefficients *coefficients, EquationParameters *equation_parameters )
{
    printf( "#If you want test solver automatically please enter 1, otherwise please enter 2\n" );
    switch( getchar() )
    {
        case AUTOMATICALLY:
            test_solver( parameters );
            break;
        case SPECIFIC_CASE:
            get_coefficients( coefficients );
            equation_parameters->coefficients = *coefficients;
            type_definer( equation_parameters );
            print_roots( &equation_parameters->cur_roots );
            break;
    }
}